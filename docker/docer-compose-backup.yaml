version:                                        "3.7"
#https://github.com/compose-spec/compose-spec/blob/master/spec.md#using-extensions-as-fragments

# Airbyte extensions
x-logging:                                      &default-logging
  options:
    max-size:                                   "100m"
    max-file:                                   "5"
  driver:                                       json-file

# Airflow extensions
x-airflow-common:                               &airflow-common
  # In order to add custom dependencies or upgrade provider packages you can use your extended image.
  # Comment the image line, place your Dockerfile in the directory where you placed the docker-compose.yaml
  # and uncomment the "build" line below, Then run `docker-compose build` to build the images.
  image:                                        ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.1.3}
  # build:                                      .
  environment:                                  &airflow-common-env
    AIRFLOW__CORE__EXECUTOR:                    CeleryExecutor
    AIRFLOW__CORE__SQL_ALCHEMY_CONN:            postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND:            db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL:                redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY:                  ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES:               'true'
    AIRFLOW__API__AUTH_BACKEND:                 'airflow.api.auth.backend.basic_auth'
    _PIP_ADDITIONAL_REQUIREMENTS:               ${_PIP_ADDITIONAL_REQUIREMENTS:-}
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    - ./dbt:/opt/airflow/dbt
  user:                                         "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-0}"
  depends_on:
    redis:
      condition:                                service_healthy
    postgres:
      condition:                                service_healthy

services:
  # Airbyte services
  init:
    image:                                      airbyte/init:${VERSION}
    logging:                                    *default-logging
    container_name:                             init
    command:                                    /bin/sh -c "./scripts/create_mount_directories.sh /local_parent ${HACK_LOCAL_ROOT_PARENT} ${LOCAL_ROOT}"
    environment:
      - LOCAL_ROOT=${LOCAL_ROOT}
      - HACK_LOCAL_ROOT_PARENT=${HACK_LOCAL_ROOT_PARENT}
    volumes:
      - ${HACK_LOCAL_ROOT_PARENT}:/local_parent
  db:
    image:                                      airbyte/db:${VERSION}
    logging:                                    *default-logging
    container_name:                             airbyte-db
    restart:                                    unless-stopped
    environment:
      - POSTGRES_USER=${DATABASE_USER}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
    volumes:
      - db:/var/lib/postgresql/airbyte
  seed:
    image:                                      airbyte/seed:${VERSION}
    container_name:                             airbyte-data-seed
    # Pre-populate the volume if it is empty.
    # See:                                      https://docs.docker.com/storage/volumes/#populate-a-volume-using-a-container
    volumes:
      - data:/app/seed
  scheduler:

    image:                                      airbyte/scheduler:${VERSION}
    logging:                                    *default-logging
    container_name:                             airbyte-scheduler
    restart:                                    unless-stopped
    environment:
      - WEBAPP_URL=${WEBAPP_URL}
      - WAIT_BEFORE_HOSTS=5
      - WAIT_HOSTS_TIMEOUT=45
      - WAIT_HOSTS=${DATABASE_HOST}:${DATABASE_PORT}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_URL=${DATABASE_URL}
      - WORKSPACE_ROOT=${WORKSPACE_ROOT}
      - WORKSPACE_DOCKER_MOUNT=${WORKSPACE_DOCKER_MOUNT}
      - LOCAL_ROOT=${LOCAL_ROOT}
      - LOCAL_DOCKER_MOUNT=${LOCAL_DOCKER_MOUNT}
      - CONFIG_ROOT=${CONFIG_ROOT}
      - TRACKING_STRATEGY=${TRACKING_STRATEGY}
      - AIRBYTE_VERSION=${VERSION}
      - AIRBYTE_ROLE=${AIRBYTE_ROLE:-}
      - TEMPORAL_HOST=${TEMPORAL_HOST}
      - S3_LOG_BUCKET=${S3_LOG_BUCKET}
      - S3_LOG_BUCKET_REGION=${S3_LOG_BUCKET_REGION}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - workspace:${WORKSPACE_ROOT}
      - ${LOCAL_ROOT}:${LOCAL_ROOT}
      - data:${CONFIG_ROOT}
  server:
    image:                                      airbyte/server:${VERSION}
    logging:                                    *default-logging
    container_name:                             airbyte-server
    restart:                                    unless-stopped
    environment:
      - WEBAPP_URL=${WEBAPP_URL}
      - WAIT_BEFORE_HOSTS=5
      - WAIT_HOSTS_TIMEOUT=45
      - WAIT_HOSTS=${DATABASE_HOST}:${DATABASE_PORT}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_URL=${DATABASE_URL}
      - WORKSPACE_ROOT=${WORKSPACE_ROOT}
      - CONFIG_ROOT=${CONFIG_ROOT}
      - TRACKING_STRATEGY=${TRACKING_STRATEGY}
      - AIRBYTE_VERSION=${VERSION}
      - AIRBYTE_ROLE=${AIRBYTE_ROLE:-}
      - TEMPORAL_HOST=${TEMPORAL_HOST}
      - S3_LOG_BUCKET=${S3_LOG_BUCKET}
      - S3_LOG_BUCKET_REGION=${S3_LOG_BUCKET_REGION}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}

    ports:
      - 8001:8001
    volumes:
      - workspace:${WORKSPACE_ROOT}
      - data:${CONFIG_ROOT}
  webapp:
    image:                                      airbyte/webapp:${VERSION}
    logging:                                    *default-logging
    container_name:                             airbyte-webapp
    restart:                                    unless-stopped
    ports:
      - 8000:80
    environment:
      - AIRBYTE_ROLE=${AIRBYTE_ROLE:-}
      - AIRBYTE_VERSION=${VERSION}
      - API_URL=${API_URL:-}
      - IS_DEMO=${IS_DEMO:-}
      - PAPERCUPS_STORYTIME=${PAPERCUPS_STORYTIME:-}
      - FULLSTORY=${FULLSTORY:-}
      - TRACKING_STRATEGY=${TRACKING_STRATEGY}
      - INTERNAL_API_HOST=${INTERNAL_API_HOST}
  airbyte-temporal:
    image:                                      temporalio/auto-setup:1.7.0
    logging:                                    *default-logging
    container_name:                             airbyte-temporal
    restart:                                    unless-stopped
    ports:
      - 7233:7233
    environment:
      - DB=postgresql
      - DB_PORT=${DATABASE_PORT}
      - POSTGRES_USER=${DATABASE_USER}
      - POSTGRES_PWD=${DATABASE_PASSWORD}
      - POSTGRES_SEEDS=${DATABASE_HOST}
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development.yaml
    volumes:
      - ./temporal/dynamicconfig:/etc/temporal/config/dynamicconfig

# Backend database
  postgres:
      image:                                    postgres:13
      environment:
        POSTGRES_USER:                          airflow
        POSTGRES_PASSWORD:                      airflow
        POSTGRES_DB:                            airflow
      volumes:
        - postgres-db-volume:/var/lib/postgresql/data
      healthcheck:
        test:                                   ["CMD", "pg_isready", "-U", "airflow"]
        interval:                               5s
        retries:                                5
      restart:                                  always
      ports:
              - 5400:5432

  # Airflow services
  redis:
      image:                                    redis:latest
      container_name:                           airflow-redis
      ports:
        - 6379:6379
      healthcheck:
        test:                                   ["CMD", "redis-cli", "ping"]
        interval:                               5s
        timeout:                                30s
        retries:                                50
      restart:                                  always

  airflow-webserver:
      <<:                                       *airflow-common
      container_name:                           airflow-webserver
      command:                                  webserver
      ports:
        - 8080:8080
      healthcheck:
        test:                                   ["CMD", "curl", "--fail", "http://localhost:8080/health"]
        interval:                               10s
        timeout:                                10s
        retries:                                5
      restart:                                  always

  airflow-scheduler:
      <<:                                       *airflow-common
      container_name:                           airflow-scheduler
      command:                                  scheduler
      healthcheck:
        test:                                   ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
        interval:                               10s
        timeout:                                10s
        retries:                                5
      restart:                                  always

  airflow-worker:
      <<:                                       *airflow-common
      #build:                                   .
      container_name:                           airflow-worker
      command:                                  celery worker
      healthcheck:
        test:
          - "CMD-SHELL"
          - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
        interval:                               10s
        timeout:                                10s
        retries:                                5
      restart:                                  always

  airflow-init:
      <<:                                       *airflow-common
      container_name:                           airflow-init
      command:
        - -c
        - |
          function ver() {
            printf "%04d%04d%04d%04d" $${1//./ }
          }
          airflow_version=$$(gosu airflow airflow version)
          airflow_version_comparable=$$(ver $${airflow_version})
          min_airflow_version=2.1.0
          min_airlfow_version_comparable=$$(ver $${min_airflow_version})
          if (( airflow_version_comparable < min_airlfow_version_comparable )); then
            echo -e "\033[1;31mERROR!!!:        Too old Airflow version $${airflow_version}!\e[0m"
            echo "The minimum Airflow version supported: $${min_airflow_version}. Only use this or higher!"
            exit 1
          fi
          if [[ -z "${AIRFLOW_UID}" ]]; then
            echo -e "\033[1;31mERROR!!!:        AIRFLOW_UID not set!\e[0m"
            echo "Please follow these instructions to set AIRFLOW_UID and AIRFLOW_GID environment variables:
              https://airflow.apache.org/docs/apache-airflow/stable/start/docker.html#initializing-environment"
            exit 1
          fi
          one_meg=1048576
          mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
          cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
          disk_available=$$(df / | tail -1 | awk '{print $$4}')
          warning_resources="false"
          if (( mem_available < 4000 )) ; then
            echo -e "\033[1;33mWARNING!!!:      Not enough memory available for Docker.\e[0m"
            echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
            warning_resources="true"
          fi
          if (( cpus_available < 2 )); then
            echo -e "\033[1;33mWARNING!!!:      Not enough CPUS available for Docker.\e[0m"
            echo "At least 2 CPUs recommended. You have $${cpus_available}"
            warning_resources="true"
          fi
          if (( disk_available < one_meg * 10 )); then
            echo -e "\033[1;33mWARNING!!!:      Not enough Disk space available for Docker.\e[0m"
            echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
            warning_resources="true"
          fi
          if [[ $${warning_resources} == "true" ]]; then
            echo
            echo -e "\033[1;33mWARNING!!!:      You have not enough resources to run Airflow (see above)!\e[0m"
            echo "Please follow the instructions to increase amount of resources available:"
            echo "   https://airflow.apache.org/docs/apache-airflow/stable/start/docker.html#before-you-begin"
          fi
          mkdir -p /sources/logs /sources/dags /sources/plugins
          chown -R "${AIRFLOW_UID}:${AIRFLOW_GID}" /sources/{logs,dags,plugins}
          exec /entrypoint airflow version
      environment:
        <<:                                     *airflow-common-env
        _AIRFLOW_DB_UPGRADE:                    'true'
        _AIRFLOW_WWW_USER_CREATE:               'true'
        _AIRFLOW_WWW_USER_USERNAME:             ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
        _AIRFLOW_WWW_USER_PASSWORD:             ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      user:                                     "0:${AIRFLOW_GID:-0}"
      volumes:
         - .:/sources         


volumes:
  workspace:
     name:                                      ${WORKSPACE_DOCKER_MOUNT}
  data:
     name:                                      ${DATA_DOCKER_MOUNT}
  db:
     name:                                      ${DB_DOCKER_MOUNT}
  postgres-db-volume:
#  database-data:
#
# networks:
#   default:
#     name:                                     dbt-net

